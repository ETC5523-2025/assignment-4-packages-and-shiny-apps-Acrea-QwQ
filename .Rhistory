# 先生成指数增长趋势，再加上轻微波动
house_price <- 100 * exp(0.06 * (year - 1990)) + rnorm(n, 0, 30)
# 合并成数据框
df <- data.frame(year, income, house_price)
# 画图
library(ggplot2)
ggplot(df, aes(x = year)) +
geom_line(aes(y = income, colour = "Disposable income"), size = 1.2) +
geom_line(aes(y = house_price, colour = "House prices"), size = 1.2) +
scale_colour_manual(values = c("Disposable income" = "pink", "House prices" = "gold")) +
labs(y = "Index (1989–90 = 100)", x = "Year",
colour = "Indicator",
title = "Simulated Detached House Prices vs Household Disposable Income") +
theme_minimal(base_size = 14)
set.seed(35285397)
# 年份序列
year <- 1990:2023
n <- length(year)
# 模拟 household disposable income (近似线性平滑增长)
income <- 100 + (year - 1990) * 6 + rnorm(n, 0, 6)
# 模拟 detached house prices (指数型增长)
# 先生成指数增长趋势，再加上轻微波动
house_price <- 100 * exp(0.06 * (year - 1990)) + rnorm(n, 0, 30)
# 合并成数据框
df <- data.frame(year, income, house_price)
# 画图
library(ggplot2)
ggplot(df, aes(x = year)) +
geom_line(aes(y = income, colour = "Disposable income"), size = 1.2) +
geom_line(aes(y = house_price, colour = "House prices"), size = 1.2) +
scale_colour_manual(values = c("Disposable income" = "pink", "House prices" = "gold")) +
labs(y = "Index (1989–90 = 100)", x = "Year",
colour = "Indicator",
title = "Simulated Detached House Prices vs Household Disposable Income") +
theme_minimal(base_size = 14)
# 模拟 Average capital gain rate change 数据
set.seed(35285397)
# 年份区间
year <- c(
"1986-87", "1989-90", "1992-93", "1995-96", "1998-99",
"2001-02", "2004-05", "2007-08", "2010-11", "2013-14",
"2016-17", "2019-20"
)
# 颜色阶段
phase <- c(rep("Before discount", 5), rep("After discount", 7))
# 模拟值
value <- c(
runif(5, 2500, 6000),             # 橙色阶段较稳定
seq(8000, 30000, length.out = 7) + rnorm(7, 0, 1500) # 蓝色阶段快速上升
)
# 整理数据框
capital_gain <- data.frame(year, phase, value)
# 可视化
library(ggplot2)
ggplot(capital_gain, aes(x = year, y = value, fill = phase)) +
geom_col(width = 0.7) +
scale_fill_manual(values = c("Before discount" = "orange", "After discount" = "steelblue")) +
labs(
title = "Average capital gain rate change",
subtitle = "Orange = before 50% capital gains discount",
y = "",
x = ""
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold"),
legend.title = element_blank()
)
# 模拟 Average capital gain rate change 数据
set.seed(35285397)
# 年份区间
year <- c(
"1986-87", "1989-90", "1992-93", "1995-96", "1998-99",
"2001-02", "2004-05", "2007-08", "2010-11", "2013-14",
"2016-17", "2019-20"
)
# 颜色阶段
phase <- c(rep("Before discount", 5), rep("After discount", 7))
# 模拟值
value <- c(
runif(5, 2500, 6000),             # 橙色阶段较稳定
seq(8000, 30000, length.out = 7) + rnorm(7, 0, 1500) # 蓝色阶段快速上升
)
# 整理数据框
capital_gain <- data.frame(year, phase, value)
# 可视化
library(ggplot2)
ggplot(capital_gain, aes(x = year, y = value, fill = phase)) +
geom_col(width = 0.7) +
scale_fill_manual(values = c("Before discount" = "orange", "After discount" = "steelblue")) +
labs(
title = "Average capital gain rate change",
subtitle = "Orange = before 50% capital gains discount",
y = "",
x = ""
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold"),
legend.title = element_blank()
)
# 模拟 Average capital gain rate change 数据
set.seed(35285397)
## —— 1) 生成年度数据（与之前风格一致） ———————————
year <- c(
"1986-87","1989-90","1992-93","1995-96","1998-99",
"2001-02","2004-05","2007-08","2010-11","2013-14",
"2016-17","2019-20"
)
phase <- c(rep("Before discount", 5), rep("After discount", 7))
annual_value <- c(
runif(5, 2500, 6000),                                 # 橙色阶段：相对稳定
seq(8000, 30000, length.out = 7) + rnorm(7, 0, 1500)  # 蓝色阶段：快速上升，带噪声
)
capital_gain_annual <- data.frame(
fiscal_year = year,
phase = phase,
annual_value = pmax(annual_value, 0)  # 防止极端噪声变负
)
## —— 2) 按年拆分为 4 个季度（季度和 = 年度值） ———————————
# 用“Gamma→归一化”的办法模拟不均衡季度占比（等价于简易 Dirichlet）
split_into_quarters <- function(total, shape = c(1.2, 1.0, 1.0, 1.3)) {
g <- rgamma(4, shape = shape)
prop <- g / sum(g)
as.numeric(total * prop)
}
# 展开为季度数据框
capital_gain_quarterly <- do.call(
rbind,
lapply(seq_len(nrow(capital_gain_annual)), function(i) {
qvals <- split_into_quarters(capital_gain_annual$annual_value[i])
data.frame(
fiscal_year = capital_gain_annual$fiscal_year[i],
phase       = capital_gain_annual$phase[i],
quarter     = factor(paste0("Q", 1:4), levels = paste0("Q", 1:4)),
`季度值`     = qvals,
annual_value = capital_gain_annual$annual_value[i]
)
})
)
## —— 3)（可选）画回年度柱状图，确保与原风格一致 ———————————
# 注意：绘图仍使用 annual_value；季度值仅保存在数据中，必要时可单独分析
library(ggplot2)
ggplot(capital_gain_annual, aes(x = fiscal_year, y = annual_value, fill = phase)) +
geom_col(width = 0.7) +
scale_fill_manual(values = c("Before discount" = "orange", "After discount" = "steelblue")) +
labs(
title = "Average capital gain rate change",
subtitle = "Orange = before 50% capital gains discount",
x = NULL, y = NULL
) +
theme_minimal(base_size = 14) +
theme(plot.title = element_text(face = "bold"),
legend.title = element_blank())
## —— 4) 完整性校验（季度求和 = 年度） ———————————
check <- aggregate(`季度值` ~ fiscal_year, capital_gain_quarterly, sum)
all.equal(check$`季度值`,
capital_gain_annual$annual_value[match(check$fiscal_year, capital_gain_annual$fiscal_year)])
# 返回 TRUE 则表示季度值之和精确等于年度值
library(dplyr)
library(ggplot2)
# Fiscal years (same labels as your reference figure)
fiscal_year <- c(
"1986-87","1989-90","1992-93","1995-96","1998-99",
"2001-02","2004-05","2007-08","2010-11","2013-14",
"2016-17","2019-20"
)
# Phase split
phase <- c(rep("Before discount", 5), rep("After discount", 7))
# Simulate annual values (overall trend)
annual_value <- c(
runif(5, 2500, 6000),
seq(8000, 30000, length.out = 7) + rnorm(7, 0, 1200)
)
# Build annual data
annual_df <- data.frame(fiscal_year, phase, annual_value)
# Function to generate quarterly proportions (summing to 1)
generate_quarters <- function(total) {
w <- rgamma(4, shape = c(1.2, 1.0, 1.0, 1.4))
q_prop <- w / sum(w)
total * q_prop
}
# Expand to quarterly data
capital_gain_quarterly <- do.call(
rbind,
lapply(seq_len(nrow(annual_df)), function(i) {
q_values <- generate_quarters(annual_df$annual_value[i])
data.frame(
fiscal_year = annual_df$fiscal_year[i],
phase       = annual_df$phase[i],
quarter     = factor(paste0("Q", 1:4), levels = paste0("Q", 1:4)),
quarter_value = q_values
)
})
)
# Verify quarterly sums
check <- capital_gain_quarterly %>%
group_by(fiscal_year) %>%
summarise(sum_quarters = sum(quarter_value)) %>%
left_join(annual_df, by = "fiscal_year")
all.equal(check$sum_quarters, check$annual_value) # TRUE means sums match
ggplot(capital_gain_quarterly,
aes(x = fiscal_year, y = quarter_value, fill = quarter)) +
geom_col(position = "stack", width = 0.7) +
facet_wrap(~phase, scales = "free_x", nrow = 1) +
scale_fill_brewer(palette = "Blues") +
labs(
title = "Average capital gain rate change (with quarterly detail)",
subtitle = "Orange = before 50% capital gains discount",
x = NULL, y = NULL, fill = "Quarter"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold"),
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1)
)
set.seed(35285397)
# Generate yearly sequence
years <- paste0(1986:2019, "-", substr(1987:2020, 3, 4))
# Label policy phase
phase <- ifelse(as.numeric(substr(years, 1, 4)) < 2000,
"Before 50% discount", "After 50% discount")
# Simulate yearly values
values <- c(
runif(sum(phase == "Before 50% discount"), 2500, 6000),
seq(7000, 30000, length.out = sum(phase == "After 50% discount")) +
rnorm(sum(phase == "After 50% discount"), 0, 1200)
)
# Combine into data frame
capital_gain <- data.frame(
year = years,
phase = phase,
value = pmax(values, 0)  # prevent negatives
)
# View sample
head(capital_gain)
tail(capital_gain)
# =====================
# Plot
# =====================
library(ggplot2)
ggplot(capital_gain, aes(x = year, y = value, fill = phase)) +
geom_col(width = 0.7) +
scale_fill_manual(values = c("Before 50% discount" = "orange",
"After 50% discount" = "steelblue")) +
labs(
title = "Average capital gain rate change",
subtitle = "Orange = before 50% capital gains discount",
x = NULL, y = NULL
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.title = element_blank()
)
ggplot(capital_gain, aes(x = year, y = value, fill = phase)) +
geom_col(width = 0.7) +
scale_fill_manual(values = c("Before 50% discount" = "orange",
"After 50% discount" = "steelblue")) +
scale_x_discrete(breaks = years[seq(1, length(years), by = 2)]) +  # show label every 2 years
labs(
title = "Average capital gain rate change",
subtitle = "Orange = before 50% capital gains discount",
x = NULL, y = NULL
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.title = element_blank()
)
ggplot(capital_gain, aes(x = year, y = value, fill = phase)) +
geom_col(width = 0.7) +
scale_fill_manual(values = c("Before 50% discount" = "orange",
"After 50% discount" = "steelblue")) +
scale_x_discrete(breaks = years[seq(1, length(years), by = 3)]) +  # show label every 2 years
labs(
title = "Average capital gain rate change",
subtitle = "Orange = before 50% capital gains discount",
x = NULL, y = NULL
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.title = element_blank()
)
ggplot(capital_gain, aes(x = year, y = value, fill = phase)) +
geom_col(width = 0.7) +
scale_fill_manual(values = c("Before 50% discount" = "orange",
"After 50% discount" = "steelblue")) +
scale_x_discrete(breaks = years[seq(1, length(years), by = 3)]) +  # show label every 2 years
labs(
title = "Average capital gain rate change",
subtitle = "Orange = before 50% capital gains discount",
x = NULL, y = NULL
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold"),
legend.title = element_blank()
)
library(ggplot2)
library(scales)
ggplot(capital_gain, aes(x = year, y = value, fill = phase)) +
geom_col(width = 0.7) +
scale_fill_manual(values = c("Before 50% discount" = "orange",
"After 50% discount" = "steelblue")) +
scale_x_discrete(breaks = years[seq(1, length(years), by = 3)]) +  # show label every 2 years
scale_y_continuous(labels = label_dollar()) +
labs(
title = "Average capital gain rate change",
subtitle = "Orange = before 50% capital gains discount",
x = NULL, y = NULL
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold"),
legend.title = element_blank()
)
library(ggplot2)
library(scales)
ggplot(capital_gain, aes(x = year, y = value, fill = phase)) +
geom_col(width = 0.7) +
scale_fill_manual(values = c("Before 50% capital gain discount" = "orange",
"After 50% capital gain discount" = "steelblue")) +
scale_x_discrete(breaks = years[seq(1, length(years), by = 3)]) +  # show label every 2 years
scale_y_continuous(labels = label_dollar()) +
labs(
title = "Average capital gain rate change",
subtitle = "Orange = before 50% capital gains discount",
x = NULL, y = NULL
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold"),
legend.title = element_blank()
)
library(ggplot2)
library(scales)
ggplot(capital_gain, aes(x = year, y = value, fill = phase)) +
geom_col(width = 0.7) +
scale_fill_manual(values = c("Before 50%  discount" = "orange",
"After 50% discount" = "steelblue")) +
scale_x_discrete(breaks = years[seq(1, length(years), by = 3)]) +  # show label every 2 years
scale_y_continuous(labels = label_dollar()) +
labs(
title = "Average capital gain rate change",
subtitle = "Orange = before 50% capital gains discount",
x = NULL, y = NULL
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold"),
legend.title = element_blank()
)
library(ggplot2)
library(scales)
ggplot(capital_gain, aes(x = year, y = value, fill = phase)) +
geom_col(width = 0.7) +
scale_fill_manual(values = c("Before 50% discount" = "orange",
"After 50% discount" = "steelblue")) +
scale_x_discrete(breaks = years[seq(1, length(years), by = 3)]) +  # show label every 2 years
scale_y_continuous(labels = label_dollar()) +
labs(
title = "Average capital gain rate change",
subtitle = "Orange = before 50% capital gains discount",
x = NULL, y = NULL
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold"),
legend.title = element_blank()
)
# 模拟 Average capital gain rate change 数据
set.seed(35285397)
# Generate yearly sequence
years <- paste0(1986:2019, "-", substr(1987:2020, 3, 4))
# Label policy phase
phase <- ifelse(as.numeric(substr(years, 1, 4)) < 2000,
"Before 50% capital gains discount", "After 50% capital gains discount")
# Simulate yearly values
values <- c(
runif(sum(phase == "Before 50% capital gains discount"), 2500, 6000),
seq(7000, 30000, length.out = sum(phase == "After 50% capital gains discount")) +
rnorm(sum(phase == "After 50% capital gains discount"), 0, 1200)
)
# Combine into data frame
capital_gain <- data.frame(
year = years,
phase = phase,
value = pmax(values, 0)  # prevent negatives
)
# View sample
head(capital_gain)
tail(capital_gain)
# =====================
# Plot
# =====================
library(ggplot2)
library(scales)
ggplot(capital_gain, aes(x = year, y = value, fill = phase)) +
geom_col(width = 0.7) +
scale_fill_manual(values = c("Before 50% capital gains discount" = "orange",
"After 50% capital gains discount" = "steelblue")) +
scale_x_discrete(breaks = years[seq(1, length(years), by = 3)]) +  # show label every 2 years
scale_y_continuous(labels = label_dollar()) +
labs(
title = "Average capital gain rate change",
subtitle = "Orange = before 50% capital gains discount",
x = NULL, y = NULL
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold"),
legend.title = element_blank()
)
library(usethis)
usethis::create_package("GoldinGroundOz")
usethis::create_package(".")
getwd()
list.files()
list.dirs()
cl
library(usethis)
usethis::create_package(".")
getwd()
usethis::use_data_raw("data_simulated")
source("D:/Monash_University/ETC5523/GoldinGroundOz/data-raw/data_simulated.R", echo = TRUE)
list.files("data")
data("housepr_income")
head(housepr_income)
devtools::load_all()
install.packages("devtools")
devtools::load_all()
data("housepr_income")
housepr_income
?ggplot2
?heand()
?head()
usethis::use_mit_license()
usethis::use_readme_rmd()
?tidyverse
?head()
devtools::build_readme()
usethis::use_r("run_shinyapp")
usethis::use_directory("inst/shiny")
file.create("inst/shiny/app.R")
usethis::use_package(ggplot2)
usethis::use_package("ggplot2")
library(shiny); runApp('D:/Monash_University/ETC5523/tutorial/w10.R')
runApp('inst/shiny')
View(capital_gain)
runApp('inst/shiny')
runApp('D:/Monash_University/ETC5523/tutorial/w10.R')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
View(capital_gain)
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
View(capital_gain)
runApp('inst/shiny')
runApp('inst/shiny')
devtools::build_readme()
runApp('inst/shiny')
runApp('D:/Monash_University/ETC5523/tutorial/w10.R')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
install.packages("bslib")
install.packages(c("shiny", "bslib"))
shiny::runApp('inst/shiny')
devtools::load_all()
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
runApp('inst/shiny')
usethis::use_package("scales")
devtools::document()
