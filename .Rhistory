library(feasts)
install.packages("feasts")
library(tidyverse)
library(mgcv)
library(mgcViz)
install.packages("mgcViz")
library(tsibble)
library(feasts)
library(lubridate)
library(forecast)
install.packages("forecast")
library(modelr)
library(reshape2)
library(gam)
install.packages("gam")
install.packages("neonUtilities")
install.packages("padr")
install.packages("svglite")
install.packages("data.table")
data.table
#######################
### Needed packages ###
#######################
library(tidyverse)
#' @title Data acquisition, processing, and modeling to understand links between
#'  water quality and nitrate
#' @author Claire Kermorvant, Guy Litt
#' @description Companion code to "Understanding links between water-quality
#' variables and nitrate concentration in freshwater streams using
#' high-frequency sensor data" https://arxiv.org/abs/2106.01719
#' @details Requires using neonUtilities >= version 2.2.1; Developed with R 4.1.0
# Changelog/contributions
# 2021-05-21 Originally created, Claire Kermorvant
# 2023-05-15 Update analysis using NEON release datasets and automating various steps
#######################
### Needed packages ###
#######################
library(tidyverse)
library(mgcv)
library(mgcViz)
library(tsibble)
library(feasts)
library(lubridate)
library(forecast)
library(modelr)
library(reshape2)
library(gam)
library(neonUtilities) # Must be >= version 2.2.1
library(dplyr)
library(lubridate)
library(padr)
library(svglite)
library(data.table)
###########################################
### download data of interest from NEON ###
###########################################
neon_sites <-  c("ARIK","LEWI","CARI")
# Define the file saving directory
user_base_dir <- Sys.getenv("USERPROFILE")
save_dir <- file.path(user_base_dir,"Documents","waq_nitrate_analysis")
plot_dir_base <- file.path(save_dir, "plots")
neonPkgVer <- utils::packageVersion("neonUtilities")
if(neonPkgVer < base::package_version('2.2.1')){
warning("The neonUtilities package version should at least be >= 2.2.1")
}
# Define the instantaneous water quality data columns of interest
waq_cols_sel <- c("startDateTime","horizontalPosition",  "specificConductance","specificCondFinalQF",
"dissolvedOxygen","dissolvedOxygenFinalQF","dissolvedOxygenSaturation",
"dissolvedOxygenSatFinalQF","pH","pHFinalQF",
"chlorophyll","chlorophyllFinalQF","turbidity",
"turbidityFinalQF","fDOM","fDOMFinalQFSciRvw")
# The dimension of the bases used to represent the smooth term. See ?mgcv::s()
smoothDimK <- 12
stepGam <- FALSE # Boolean, perform step-wise check on best GAM? Helps decide smoothDimK. Set FALSE to proceed with automatic
# Define the time range and sensor locations to apply the model
dataSetup <- base::data.frame(site = c("ARIK","CARI","LEWI"),
startDate = as.POSIXct(c("2018-09-01","2018-06-01","2018-01-01"),tz="GMT"),
endDate = as.POSIXct(c("2020-01-01","2019-12-31","2019-12-31"),tz="GMT"),
modlStart = as.POSIXct(c("2018-09-01","2018-06-01","2018-01-01"), tz="GMT"),
modlEnd = as.POSIXct(c("2019-12-31","2019-10-31","2019-12-31"),tz="GMT"),
elevHor = c("101","102","102"), # Note - use 101 at ARIK due to fewer missing values
tempHor = c("101","102","102"), # Note - use 101 at ARIK due to fewer missing values
defaultHor = "102") # The default horizontal position for all data products
sitesElev102 <- dataSetup$site[which(dataSetup$elevHor=="102")]
sitesTemp102 <- dataSetup$site[which(dataSetup$tempHor=="102")]
# Unique ID used in file saving directory structure
uniqId <- paste0("smoothDimK",smoothDimK, "_Reg_","TempDownStrm_",paste0(sitesTemp102,collapse=""),
"_ElevDownStrm_",paste0(sitesElev102,collapse=""))
# Assign directory for saving plots
plot_dir <- file.path(plot_dir_base,uniqId)
if(!dir.exists(plot_dir)){ # Create the save directory
print(paste0("Creating the following directory path: ", plot_dir))
dir.create(plot_dir,recursive=TRUE)
}
# ---------------------------------------------------------------------------- #
#   Download data
# ---------------------------------------------------------------------------- #
# 1 - water quality product
if(file.exists(file.path(save_dir,"waq.rda"))) {
waq <- readRDS(file.path(save_dir,"waq.rda"))
} else {
print("Downloading water quality data (may take a while)")
waq <- neonUtilities::loadByProduct(
dpID = "DP1.20288.001",
site = neon_sites,
startdate = "2018-01",
enddate = "2019-12",
package = "expanded",
token = Sys.getenv("NEON_TOKEN"),
check.size = FALSE,
release="RELEASE-2021"
)
saveRDS(waq, file.path(save_dir,"waq.rda"))
}
